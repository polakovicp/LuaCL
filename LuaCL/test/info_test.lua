--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--	This file is part of bachelor project:
--		"OpenCL module for Lua language"
--
--	filename	: 	info_test.lua
--
--	description	: 	file tests functionality of methods
--					for obtaining information of OpenCL
--					objects
--
--
--	autor		: 	Patrik Polakovic
--
--			26.04.2011
--
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

local lcl = require('lcl.core')

src =[[
		__kernel void test(__global const uint2 * input)
		{
			int i = get_global_id(0);
		}
	]]

local cx, e  = lcl.NewContext("CL_DEVICE_TYPE_CPU")
	local ipx, e = cx.GetPlatformInfo()
	local idx, e = cx.GetDeviceInfo()
	local icx,e = cx.Info()

local queue, e = cx.Queue()
	local icq, e = queue.Info()

data = {}
buf,e = cx.Buffer("CL_MEM_READ_ONLY", "uint2", 10)

	local ibi,e = buf.Info()

img = cx.Image2D("CL_MEM_READ_ONLY", {"CL_RGBA", "CL_UNSIGNED_INT32"}, 600, 400, "uint16")
	local imino = img.Info()

smp,e = cx.Sampler("CL_FALSE", "CL_ADDRESS_NONE", "CL_FILTER_NEAREST")
	local si = smp.Info()

prog,e = cx.Build(src)
	local bui = prog.BuildInfo()
	local pui = prog.Info()

kernel,e = prog.Kernel("test")
	local kua = kernel.Info()

print("\nCONTEXT")
print("CL_CONTEXT_REFERENCE_COUNT", icx["CL_CONTEXT_REFERENCE_COUNT"])
print("CL_CONTEXT_NUM_DEVICES", icx["CL_CONTEXT_NUM_DEVICES"])

print("\nPLATFORM")
print("CL_PLATFORM_PROFILE", ipx["CL_PLATFORM_PROFILE"])
print("CL_PLATFORM_VERSION", ipx["CL_PLATFORM_VERSION"])
print("CL_PLATFORM_NAME", ipx["CL_PLATFORM_NAME"])
print("CL_PLATFORM_VENDOR", ipx["CL_PLATFORM_VENDOR"])
print("CL_PLATFORM_EXTENSIONS", ipx["CL_PLATFORM_EXTENSIONS"])

print("\nDEVICE")
print("CL_DEVICE_TYPE",idx["CL_DEVICE_TYPE"])
print("CL_DEVICE_VENDOR_ID",idx["CL_DEVICE_VENDOR_ID"])
print("CL_DEVICE_MAX_COMPUTE_UNITS",idx["CL_DEVICE_MAX_COMPUTE_UNITS"])
print("CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS",idx["CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS"])
print("CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR",idx["CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR"])
print("CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT",idx["CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT"])
print("CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT",idx["CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT"])
print("CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG",idx["CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG"])
print("CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT",idx["CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT"])
print("CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE",idx["CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE"])
print("CL_DEVICE_MAX_CLOCK_FREQUENCY",idx["CL_DEVICE_MAX_CLOCK_FREQUENCY"])
print("CL_DEVICE_ADDRESS_BITS",idx["CL_DEVICE_ADDRESS_BITS"])
print("CL_DEVICE_MAX_READ_IMAGE_ARGS",idx["CL_DEVICE_MAX_READ_IMAGE_ARGS"])
print("CL_DEVICE_MAX_WRITE_IMAGE_ARGS",idx["CL_DEVICE_MAX_WRITE_IMAGE_ARGS"])
print("CL_DEVICE_MAX_SAMPLERS",idx["CL_DEVICE_MAX_SAMPLERS"])
print("CL_DEVICE_MEM_BASE_ADDR_ALIGN",idx["CL_DEVICE_MEM_BASE_ADDR_ALIGN"])
print("CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE",idx["CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE"])
print("CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE",idx["CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE"])
print("CL_DEVICE_MAX_CONSTANT_ARGS",idx["CL_DEVICE_MAX_CONSTANT_ARGS"])
print("CL_DEVICE_MAX_WORK_GROUP_SIZE",idx["CL_DEVICE_MAX_WORK_GROUP_SIZE"])
print("CL_DEVICE_IMAGE2D_MAX_WIDTH",idx["CL_DEVICE_IMAGE2D_MAX_WIDTH"])
print("CL_DEVICE_IMAGE2D_MAX_HEIGHT",idx["CL_DEVICE_IMAGE2D_MAX_HEIGHT"])
print("CL_DEVICE_IMAGE3D_MAX_WIDTH",idx["CL_DEVICE_IMAGE3D_MAX_WIDTH"])
print("CL_DEVICE_IMAGE3D_MAX_HEIGHT",idx["CL_DEVICE_IMAGE3D_MAX_HEIGHT"])
print("CL_DEVICE_IMAGE3D_MAX_DEPTH",idx["CL_DEVICE_IMAGE3D_MAX_DEPTH"])
print("CL_DEVICE_MAX_PARAMETER_SIZE",idx["CL_DEVICE_MAX_PARAMETER_SIZE"])
print("CL_DEVICE_PROFILING_TIMER_RESOLUTION",idx["CL_DEVICE_PROFILING_TIMER_RESOLUTION"])
print("CL_DEVICE_MAX_MEM_ALLOC_SIZE",idx["CL_DEVICE_MAX_MEM_ALLOC_SIZE"])
print("CL_DEVICE_GLOBAL_MEM_CACHE_SIZE",idx["CL_DEVICE_GLOBAL_MEM_CACHE_SIZE"])
print("CL_DEVICE_GLOBAL_MEM_SIZE",idx["CL_DEVICE_GLOBAL_MEM_SIZE"])
print("CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE",idx["CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE"])
print("CL_DEVICE_LOCAL_MEM_SIZE",idx["CL_DEVICE_LOCAL_MEM_SIZE"])
print("CL_DEVICE_IMAGE_SUPPORT",idx["CL_DEVICE_IMAGE_SUPPORT"])
print("CL_DEVICE_ERROR_CORRECTION_SUPPORT",idx["CL_DEVICE_ERROR_CORRECTION_SUPPORT"])
print("CL_DEVICE_ENDIAN_LITTLE",idx["CL_DEVICE_ENDIAN_LITTLE"])
print("CL_DEVICE_AVAILABLE",idx["CL_DEVICE_AVAILABLE"])
print("CL_DEVICE_COMPILER_AVAILABLE",idx["CL_DEVICE_COMPILER_AVAILABLE"])
print("CL_DEVICE_SINGLE_FP_CONFIG",idx["CL_DEVICE_SINGLE_FP_CONFIG"])
print("CL_DEVICE_GLOBAL_MEM_CACHE_TYPE",idx["CL_DEVICE_GLOBAL_MEM_CACHE_TYPE"])
print("CL_DEVICE_LOCAL_MEM_TYPE",idx["CL_DEVICE_LOCAL_MEM_TYPE"])
print("CL_DEVICE_EXECUTION_CAPABILITIES",idx["CL_DEVICE_EXECUTION_CAPABILITIES"])
print("CL_DEVICE_QUEUE_PROPERTIES",idx["CL_DEVICE_QUEUE_PROPERTIES"])
print("CL_DEVICE_MAX_WORK_ITEM_SIZES",unpack(idx["CL_DEVICE_MAX_WORK_ITEM_SIZES"]))
print("CL_DEVICE_PLATFORM",idx["CL_DEVICE_PLATFORM"])
print("CL_DEVICE_NAME",idx["CL_DEVICE_NAME"])
print("CL_DEVICE_VENDOR",idx["CL_DEVICE_VENDOR"])
print("CL_DRIVER_VERSION",idx["CL_DRIVER_VERSION"])
print("CL_DEVICE_PROFILE",idx["CL_DEVICE_PROFILE"])
print("CL_DEVICE_VERSION",idx["CL_DEVICE_VERSION"])
print("CL_DEVICE_EXTENSIONS",idx["CL_DEVICE_EXTENSIONS"])

print("\nQUEUE")
print("CL_QUEUE_CONTEXT", icq["CL_QUEUE_CONTEXT"])
print("CL_QUEUE_DEVICE", icq["CL_QUEUE_DEVICE"])
print("CL_QUEUE_REFERENCE_COUNT", icq["CL_QUEUE_REFERENCE_COUNT"])
print("CL_QUEUE_PROPERTIES", icq["CL_QUEUE_PROPERTIES"])

print("\nBUFFER")
print("CL_MEM_TYPE", ibi["CL_MEM_TYPE"])
print("CL_MEM_FLAGS", ibi["CL_MEM_FLAGS"])
print("CL_MEM_SIZE", ibi["CL_MEM_SIZE"])
print("CL_MEM_REFERENCE_COUNT", ibi["CL_MEM_REFERENCE_COUNT"])
print("CL_MEM_CONTEXT", ibi["CL_MEM_CONTEXT"])
print("CL_MEM_ASSOCIATED_MEMOBJECT", ibi["CL_MEM_ASSOCIATED_MEMOBJECT"])

print("\nIMAGE")
print("CL_MEM_TYPE", imino["CL_MEM_TYPE"])
print("CL_MEM_FLAGS", imino["CL_MEM_FLAGS"])
print("CL_MEM_SIZE", imino["CL_MEM_SIZE"])
print("CL_MEM_REFERENCE_COUNT", imino["CL_MEM_REFERENCE_COUNT"])
print("CL_MEM_CONTEXT", imino["CL_MEM_CONTEXT"])
print("CL_MEM_ASSOCIATED_MEMOBJECT", imino["CL_MEM_ASSOCIATED_MEMOBJECT"])
print("CL_IMAGE_FORMAT", imino["CL_IMAGE_FORMAT"])
print("CL_IMAGE_ELEMENT_SIZE", imino["CL_IMAGE_ELEMENT_SIZE"])
print("CL_IMAGE_ROW_PITCH", imino["CL_IMAGE_ROW_PITCH"])
print("CL_IMAGE_SLICE_PITCH", imino["CL_IMAGE_SLICE_PITCH"])
print("CL_IMAGE_WIDTH", imino["CL_IMAGE_WIDTH"])
print("CL_IMAGE_HEIGHT", imino["CL_IMAGE_HEIGHT"])
print("CL_IMAGE_DEPTH", imino["CL_IMAGE_DEPTH"])

print("\nSAMPLER")
print("CL_SAMPLER_CONTEXT", si["CL_SAMPLER_CONTEXT"])
print("CL_SAMPLER_REFERENCE_COUNT", si["CL_SAMPLER_REFERENCE_COUNT"])
print("CL_SAMPLER_ADDRESSING_MODE", si["CL_SAMPLER_ADDRESSING_MODE"])
print("CL_SAMPLER_FILTER_MODE", si["CL_SAMPLER_FILTER_MODE"])
print("CL_SAMPLER_NORMALIZED_COORDS", si["CL_SAMPLER_NORMALIZED_COORDS"])

print("\nBUILD")
print("CL_PROGRAM_BUILD_STATUS", bui["CL_PROGRAM_BUILD_STATUS"])
print("CL_PROGRAM_BUILD_OPTIONS", bui["CL_PROGRAM_BUILD_OPTIONS"])
print("CL_PROGRAM_BUILD_LOG", bui["CL_PROGRAM_BUILD_LOG"])

print("\nPROGRAM")
print("CL_PROGRAM_REFERENCE_COUNT", pui["CL_PROGRAM_REFERENCE_COUNT"])
print("CL_PROGRAM_NUM_DEVICES", pui["CL_PROGRAM_NUM_DEVICES"])
print("CL_PROGRAM_CONTEXT", pui["CL_PROGRAM_CONTEXT"])
print("CL_PROGRAM_DEVICES", pui["CL_PROGRAM_DEVICES"])
print("CL_PROGRAM_SOURCE", pui["CL_PROGRAM_SOURCE"])

print("\nKERNEL")
print("CL_KERNEL_FUNCTION_NAME", kua["CL_KERNEL_FUNCTION_NAME"])
print("CL_KERNEL_NUM_ARGS", kua["CL_KERNEL_NUM_ARGS"])
print("CL_KERNEL_REFERENCE_COUNT", kua["CL_KERNEL_REFERENCE_COUNT"])
print("CL_KERNEL_CONTEXT", kua["CL_KERNEL_CONTEXT"])
print("CL_KERNEL_PROGRAM", kua["CL_KERNEL_PROGRAM"])

smp:Release()
kernel:Release()
prog:Release()
cx:Release()
queue:Release()
buf:Release()
